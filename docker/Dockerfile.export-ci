FROM ubuntu:22.04

ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies used in CI for headless browsers, fonts and native svg conversion
RUN apt-get update \
  && apt-get install -y --no-install-recommends \
    ca-certificates \
    curl \
    gnupg \
    build-essential \
    git \
    wget \
    unzip \
    python3 \
    python3-pip \
    libgtk-3-0 \
    libgbm1 \
    libasound2 \
    libnss3 \
    libxss1 \
    fonts-dejavu-core \
    imagemagick \
    librsvg2-bin \
    pkg-config \
  && rm -rf /var/lib/apt/lists/*

# Install additional fonts and ffmpeg which affect rendering parity with GitHub runners
RUN apt-get update \
  && apt-get install -y --no-install-recommends \
    fonts-liberation \
    fonts-noto-core \
    fonts-noto-color-emoji \
    ffmpeg \
  && rm -rf /var/lib/apt/lists/*

# Install Node.js 22 from NodeSource (matches CI runner choice)
RUN curl -fsSL https://deb.nodesource.com/setup_22.x | bash - \
  && apt-get update && apt-get install -y nodejs && rm -rf /var/lib/apt/lists/*

# Enable corepack and pnpm for consistent installs
RUN corepack enable || true
RUN corepack prepare pnpm@latest --activate || true

WORKDIR /workspace

# Copy lockfiles first to leverage Docker cache for deps
COPY package.json pnpm-lock.yaml* package-lock.json* ./

# Run installs during image build so the runtime container doesn't have to install
# (avoids pnpm interactive/no-tty issues and guarantees Playwright is present).
# Set CI=true so pnpm runs non-interactively and honors CI behavior.
ENV CI=true

# Install Node deps (prefer pnpm when lockfile present). Use --frozen-lockfile to
# ensure deterministic installs and --reporter=silent to reduce noisy output.
RUN if [ -f pnpm-lock.yaml ]; then \
      pnpm install --frozen-lockfile --reporter=silent || pnpm install --frozen-lockfile || pnpm install; \
    else \
      npm install --production || true; \
    fi

# Ensure Playwright package is installed and browsers are downloaded during build.
# Use pnpm exec to run the playwright binary from the installed deps. Keep browsers
# in a stable location and include system deps via --with-deps for CI parity.
ENV PLAYWRIGHT_BROWSERS_PATH=/ms-playwright
RUN pnpm exec -- playwright install --with-deps || true

# Copy the scripts and minimal project files we need for export
COPY scripts/ ./scripts/
COPY tools/ ./tools/
COPY docs/ ./docs/
COPY docker/run-export.sh /usr/local/bin/run-export.sh
RUN chmod +x /usr/local/bin/run-export.sh

VOLUME ["/workspace/out"]
ENTRYPOINT ["/usr/local/bin/run-export.sh"]
