# Server
PORT=5050
NODE_ENV=development

# JWT
JWT_SECRET=change_me_to_a_long_random_string
JWT_EXPIRES=7d

# CORS (for development UI served from file:// or another port)
CORS_ORIGIN=http://localhost:5173,http://localhost:5050

# Paths
PUBLIC_DIR=../public
AUDIT_LOG=./logs/audit.jsonl
USERS_FILE=./data/users.json

# SMTP (optional, for sending password reset emails)
SMTP_HOST=smtp.example.com
SMTP_PORT=587
SMTP_SECURE=false
SMTP_USER=apikey
SMTP_PASS=secret
SMTP_FROM="Support <no-reply@example.com>"


# Optional: send critical admin events to this webhook URL (POST JSON)
WEBHOOK_URL=

# Slack webhook (optional) for admin notifications
SLACK_WEBHOOK_URL=
# Brand (optional) â€” used in emails/templates
BRAND_NAME=My Cafe
BRAND_SUPPORT_EMAIL=support@example.com

# Validate-slot protection & caching
VALIDATE_RATE_THRESHOLD=60         # max requests per window per IP
VALIDATE_RATE_WINDOW_MS=300000     # 5 minutes
VALIDATE_CACHE_TTL_MS=120000       # 2 minutes TTL
VALIDATE_CACHE_MAX=2000            # max cache entries

# Optional Redis for validate cache/limiter
REDIS_URL=redis://localhost:6379/0
REDIS_PREFIX=appmat

# Multi-tenant cache/limit
TENANT_HEADER=X-Tenant-ID
DEFAULT_TENANT=default

# Tenant resolution mode
# - jwt:    derive tenant from authenticated user claims only (header ignored)
# - header: derive tenant from TENANT_HEADER only
# - both:   prefer JWT claim; fallback to header; fallback to DEFAULT_TENANT
TENANT_SOURCE=both
# Dot-path within req.user to read tenant when TENANT_SOURCE includes jwt
# Examples: tenant, org.id, app.tenant
TENANT_CLAIM=tenant

# GitHub Workflow Dispatch (for Open PR button)
GH_TOKEN=ghp_xxx...          # GitHub PAT with workflow + repo write permissions
GH_REPO=OWNER/REPO           # e.g. your-org/appmat
GH_WORKFLOW=suite-promote-pr.yml
